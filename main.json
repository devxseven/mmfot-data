{
  "BwoYDBYdAg==": "AP4]D'SW\SJA@E$KVWFIVWD@\'@DJ @DJVV7@\V)]AU:	@DJVW5@\V@DWKW$SJAUA@]%UC]AU7(KVWSJ0@DW
]AWSV/AWD5SW^UPSJA@D&KVW )	 SJA@E$KVW 	]AWSW-AWD:	SJA@E$KVW@]%@D>VW0
X@D> KV# 	V@\V@D;VWD)@\V@E9VWD&]AU 	@DJVW5@\V
:	AWD]@$SW\ @E$KV#SJ5	]KV#SW(' : 	K@DWKV&SJA	@DJVV7@[&@A:VWD	 SJA@E$KVW ]AU>!KVWSJ0@DW	SJA@E$KVWBOJ]B\KVWSO7@D&KS'SJAAWD]@$SW\2@DH !SW\AW5]AWAWD]@$SW\PRO@G\SW\AR2]A&SR,AWD@\V@E9VWD3KVU><VWFTKVWSJ0@DW	SJA@E$KVW@]%@D>VW0	XK]A#@D>  	HBAJR@P1VV]KW#   @E<@F\RDDV
]PDJKFSWSWF\GAW@1AV2NDCWPVSJA@A!KV&SO1@DW ]AWSV/AWD.VWF6*AWFIVWD@\'@DJ@\V@E9VWD]@$SW(AW0	K V  KV# SW([QW]R@M,	@	V@VV07 
SV* N@JVFT
\UARS]\PN@NTX\GLK@DS1@E!XSCJQE@\V@A<VW5@Y&@DJ KVWSK2@DW8AWF07@DU\AWD]A&SW\]AWSV/AWD]AWSR*AW5]D'SW\
VWD@]%@DJ%@DU= @DHA@DWKV&SJA	KVWSK2@DWKVWSO7@D&KS'SJAAWD]@$SW\!+SJC-2@\V@D;VWD@DJVV7@\V@DJVR2@\'@A:VWD	 SJA@E$KVW36VWF-*AWFIVWD@\'@DJ@\V@E9VWD@\V@A<VW5@Y&@DJ KVWSK2@DW+*@DH !SW\AW5]AWAWD]@$SW\AWD]D!SW-AR4]AW@DJVV7@\V&8]AU>!KVWSJ0@DW	SJA@E$KVWSJA@A!KV&SO1@DW ]AWSV/AWD;VWF-*AWD]A&SW\]AWSV/AWDL@PFSXAWD]D!SW-AR4]AW@DJVV7@\V&SJC62@\V@D;VWD@DJVV7@\VQEMCS@@\V@A<VP2@Y @D;VR4@\V]AWSV/AWDHA@DWKV&SJA		 SJA@E$KVW%@\T$SJA@D&KVW SW\AV7]AWF]KW$EHVWF5#AWD]A&SW\ VWD@]%@DJ>@\TTC]AWSW-AWD: ]AWSV/AWD- @DJVW5@\V:	AWD]@$SW\ @E$KV#SJ5	]KV#SW(1K
SJA@D&KVW)	 SJA@E$KVW>	KVU 
KVWSJ0@DW'@\V@E9VWD]@$SW(AW0
X 
SW( VW03
]KVWSJ0@DWVWD@]%@C:VR4@\V@DWKW$SJA3SW^,!SJA@D&KVW
@DWKW$SJA@DWKS!SJ0@A'KVW SW\AV7]AW @\T62]AWSW-AWD	SW\AV7]AWSW\AR2]A&SR,AWD@\V@E9VWD3KVU><VWFTKVWSJ0@DW	SJA@E$KVWSJA@A!KV&SO1@DW ]AWSV/AWD.VWF6*AWFIVWD@\'@DJ@\V@E9VWD@\V@A<VW5@Y&@DJ KVWSK2@DW8AWF07@DU\AWD]A&SW\]AWSV/AWD]AWSR*AW5]D'SW\
VWD@]%@DJ%@DU= @DHA@DWKV&SJA	KVWSK2@DWKVWSO7@D&KS'SJAAWD]@$SW\!+SJC-2@\V@D;VWD@DJVV7@\V@DJVR2@\'@A:VWD	 SJA@E$KVW36VWF-*AWFIVWD@\'@DJ@\V@E9VWD@\V@A<VW5@Y&@DJ KVWSK2@DW+*@DH !SW\AW5]AWAWD]@$SW\AWD]D!SW-AR4]AW@DJVV7@\V&8]AU>!KVWSJ0@DW	SJA@E$KVWSJA@A!KV&SO1@DW ]AWSV/AWD;VWF-*AWD]A&SW\]AWSV/AWD]AWSR*AW5]D'SW\
VWD@]%@DJ0@DU= @DJVW5@\VVWD@]%@DJVWD@Y @C<VR2@\'@A:VWD
AWD]@$SW\TVSJA@D&KVW KVWSK2@DW=VWF$KVWSJ0@DW]AWSV/AWDHK@E$]T@DH#(SW\AW5]AW@DJVV7@\V(
VWFT[AWD]A&SW\
,AWD]@$SW\)
@DWKV&SJA;VWD@]%@DJAV7]A#SW(		@]A# 	@D>[
V@\V@D;VWD)@\V@E9VWD5]AWSW-AWD:	SJA@E$KVW@]%@D>VW0
X@D> KV#K
SJA@D&KVW@\V@E9VP4@Y&@DJ KVWSK2@DW8AWF07@DWKV&SJA	KVWSK2@DWKVWSO7@D&KS'SJAAWD]@$SW\2@DH !SW\AW5]AWAWD]@$SW\AWD]D!SW-AR4]AW@DJVV7@\V3SJC-2@\TTSJA@D&KVW
@DWKW$SJA@DWKS!SJ0@A'KVW SW\AV7]AW @\T62]AUG@\V@D;VWD@DJVV7@\V@DJVR2@\'@A:VWD	 SJA@E$KVW ]AU>!KVUD]AWSW-AWD	SW\AV7]AWSW\AR2]A&SR,AWD@\V@E9VWD3KVU%<VWFWKVWSJ0@DW	SJA@E$KVWSJA@A!KV&SO1@DW ]AWSV/AWD==@DU& @DJVW5@\VVWD@]%@DJVWD@Y @D;VR4@\V@DWKW$SJA 8@\T-2]AUG@\V@D;VWD@DJVV7@\V@DJVR2@\'@A:VWD	 SJA@E$KVW36VWF6*AWD]A&SW\]AWSV/AWD]AWSR*AW5]D'SW\
VWD@]%@DJ0+SW^,!SJA@D&KVW
@DWKW$SJA@DWKS!SJ0@A'KVW SW\AV7]AW5@\T-2]AWSW-AWD	SW\AV7]AWSW\AR2]A&SR,AWD@\V@E9VWD&KVU%<VWD@\'@DJ@\V@E9VWD@\V@A<VP2@Y @D;VR4@\V]AWSV/AWDHG@DWKV&SJA		 SJA@E$KVW4]AWSW-AWD@\V@E9VWDUWAV7HC@DU>)@DJVW5@\V@DWKW$SJA(KVUGMVWD@\'@DJ
 1
VWD@]%@DJ$ @DH1
@DJVW5@\V:	AWD]@$SW\ @E$KV#SJ5	]KV#SW(3 [']KVWSJ0@DW' KVWSK2@DW#	 @DWKV&SJA;VWD@]%@DJAV7]A#SW(		@]A# 	@D>>
 XSW\AW5]AW SJA@E$KQ'SO1@DW ]AWSV/AWD.VWF-*AWD]A&SW\]AWSV/AWD]AWSR*AW5]D'SW\
VWD@]%@DJ%@DU= @DJVW5@\VVWD@]%@DJVWD@Y @D;VR4@\V@DWKW$SJA3SW^,!SJCTSW\AW5]AWAWD]@$SW\AWD]D!SW-AR4]AW@DJVV7@\V3SJC62@\TTSJA@D&KVW
@DWKW$SJA@DWKS!SJ0@A'KVW SW\AV7]AW @\T-2]AUD@\V@D;VWD@DJVV7@\V@DJVR2@\'@A:VWD	 SJA@E$KVW ]AU%!KVUD]AWSW-AWD	SW\AV7]AWSW\AR2]A&SR,AWD@\V@E9VWD  AWF07@DWKV&SJA	KVWSK2@DWKVWSO7@D&KS'SJAAWD]@$SW\!+SJC-2@\TTSJA@D&KVW
@DWKW$SJA@DWKS!SJ0@A'KVW SW\AV7]AW3+KVU%<VWD@\'@DJ@\V@E9VWD@\V@A<VW5@Y&@DJ KVWSK2@DW-*@DH;!SW\AW5]AWAWD]@$SW\AWD]D!SW-AR4]AW@DJVV7@\V&SJC-2@\V@D;VWD@DJVV7@\V@DJVR2@\'@A:VWD	 SJA@E$KVW5]AU%!KVWSJ0@DW	SJA@E$KVWSJA@A!KQ!SO7@D&KS'SJA@\V@E9VWDU[AWD]A&SW\  SW\AV7]AW4   @\V@D;VWD	 SJA@E$KVWFAVV7U^AWF(>@DWKV&SJAAWD]@$SW\)]AUGPKVWSJ0@DW' KVWSK2@DW;
VWF'	VWD@\'@DJ
 1]AWSV/AWDKW$SJ5@D# KSJ5AW0-C& X @DJVW5@\V
:@DJVV7@\V'@\T(@\V@D;VWD)SW\AV7]AWSK2@D#KV#
	K	@D#]A#4U>XSW\AW5]AW SJA@E$KQ'SO1@DW ]AWSV/AWD.VWF-*AWD]A&SW\]AWSV/AWD]AWSR*AW5]D'SW\
VWD@]%@DJ%@DU= @DJVW5@\VVWD@]%@DJVWD@Y @D;VR4@\V@DWKW$SJA3SW^,!SJCTSW\AW5]AWAWD]@$SW\AWD]D!SW-AR4]AW@DJVV7@\V3SJC62@\TTSJA@D&KVW
@DWKW$SJA@DWKS!SJ0@A'KVW SW\AV7]AW @\T-2]AUD@\V@D;VWD@DJVV7@\V@DJVR2@\'@A:VWD	 SJA@E$KVW ]AU%!KVUD]AWSW-AWD	SW\AV7]AWSW\AR2]A&SR,AWD@\V@E9VWD  AWF07@DWKV&SJA	KVWSK2@DWKVWSO7@D&KS'SJAAWD]@$SW\!+SJC-2@\TTSJA@D&KVW
@DWKW$SJA@DWKS!SJ0@A'KVW SW\AV7]AW3+KVU%<VWD@\'@DJ@\V@E9VWD@\V@A<VW5@Y&@DJ KVWSK2@DW-*@DH;!SW\AW5]AWAWD]@$SW\AWD]D!SW-AR4]AW@DJVV7@\V&SJC-2@\V@D;VWD@DJVV7@\V@DJVR2@\'@A:VWD	 SJA@E$KVW5]AU%!KVWSJ0@DW	SJA@E$KVWSJA@A!KQ!SO7@D&KS'SJA@\V@E9VWDUXAWD]A&SW\  SW\AV7]AW4   @\V@D;VWD	 SJA@E$KVWFAVV7U^AWF(>@DWKV&SJAAWD]@$SW\)]AUGPKVWSJ0@DW' KVWSK2@DW#VWFU[AWD]A&SW\
,KVWSK2@DWVV7@\"@D>
 V@\"@D##,UCK
SJA@D&KVW)	 SJA@E$KVW0
@DJVW5@\V
:	AWD]@$SW\ @E$KV#SJ5	]KV#SW(@]AWSW-AWDKVWSK2@C'KS'SJAAWD]@$SW\2@DH;!SW\AW5]AWAWD]@$SW\AWD]D!SW-AR4]AW@DJVV7@\V3SJC62@\V@D;VWD@DJVV7@\V@DJVR2@\'@A:VWD	 SJA@E$KVW ]AU>!KVUG]AWSW-AWD	SW\AV7]AWSW\AR2]A&SR,AWD@\V@E9VWD3KVU%<VWFTKVWSJ0@DW	SJA@E$KVWSJA@A!KV&SO1@DW ]AWSV/AWD.VWF-*AWFJVWD@\'@DJ@\V@E9VWD@\V@A<VW5@Y&@DJ KVWSK2@DW8AWF+7@DU\AWD]A&SW\]AWSV/AWD]AWSR*AW5]D'SW\
VWD@]%@DJ6+SW^,!SJA@D&KVW
@DWKW$SJA@DWKS!SJ0@A'KVW SW\AV7]AW3+KVU><VWFTKVWSJ0@DW	SJA@E$KVWSJA@A!KV&SO1@DW ]AWSV/AWD==@DU= @DJVW5@\VVWD@]%@DJVWD@Y @D;VR4@\V@DWKW$SJA&8@\T-2]AWSW-AWD	SW\AV7]AWSW\AR2]A&SR,AWD@\V@E9VWD&KVU><VWD@\'@DJ@\V@E9VWD@\V@A<VW5@Y&@DJ KVWSK2@DW-AWF+7@DWKV&SJA	KVWSK2@DWKVWSO7@C!KS!SJ0@A'KVWVWD@]%@DJCRSW\AW5]AW ]AWSV/AWD: VWD@\'@DJ KVWSK2@DW^]@E9CUSW^4(SJA@D&KVW SW\AV7]AW;AWFIF@DWKV&SJA;@DWKW$SJA$VWD@\'@DJ
 1]AWSV/AWDKW$SJ5@D# KSJ5AW0XSW\AW5]AW: SW\AV7]AW!
SW\AW5]AW:@DWKW$SJA@E9VW0@\"JVW0SJ5	
K	AWD]A&SW\ @DWKW$SM1@A'KVW SW\AV7]AW @\T-2]AWSW-AWD	SW\AV7]AWSW\AR2]A&SR,AWD@\V@E9VWD3KVU%<VWD@\'@DJ@\V@E9VWD@\V@A<VW5@Y&@DJ KVWSK2@DW8AWF07@DU_AWD]A&SW\]AWSV/AWD]AWSR*AW5]D'SW\
VWD@]%@DJ%@DU= @DHB@DWKV&SJA	KVWSK2@DWKVWSO7@D&KS'SJAAWD]@$SW\2@DH;!SW^V@DJVW5@\VVWD@]%@DJVWD@Y @D;VR4@\V@DWKW$SJA3SW^7!SJCWSW\AW5]AWAWD]@$SW\AWD]D!SW-AR4]AW@DJVV7@\V 8]AU>!KVWSJ0@DW	SJA@E$KVWSJA@A!KV&SO1@DW ]AWSV/AWD==@DU& @DHB@DWKV&SJA	KVWSK2@DWKVWSO7@D&KS'SJAAWD]@$SW\!+SJC62@\V@D;VWD@DJVV7@\V@DJVR2@\'@A:VWD	 SJA@E$KVW56VWF-*AWD]A&SW\]AWSV/AWD]AWSR*AW5]D'SW\
VWD@]%@DJ0@DU& @DJVW5@\VVWD@]%@DJVWD@Y @D;VR4@\V@DWKW$SJA&SW^7!SJA@D&KVW
@DWKW$SJA@DWKS!SM7@A!KV&SO1@DW @DJVV7@\VUN]AWSW-AWDAWD]@$SW\4 @\T)@\V@D;VWD	 SJA@E$KVWFAVV7V^AWF(>@DWKV&SJAAWD]@$SW\)]AUGPKVWSJ0@DW' KVWSK2@DW+ SW\AW5]AW
:@DWKW$SJA@E9VW0@\"JVW0SJ5   
V@\V@D;VWD)@\V@E9VWD2SJC-KVWSJ0@DW'@\V@E9VWD]@$SW(AW0
X 
SW( VW0K	AWD]A&SW\ @DWKW$SM1@A'KVW SW\AV7]AW @\T-2]AWSW-AWD	SW\AV7]AWSW\AR2]A&SR,AWD@\V@E9VWD3KVU%<VWD@\'@DJ@\V@E9VWD@\V@A<VW5@Y&@DJ KVWSK2@DW8AWF07@DU_AWD]A&SW\]AWSV/AWD]AWSR*AW5]D'SW\
VWD@]%@DJ%@DU= @DHB@DWKV&SJA	KVWSK2@DWKVWSO7@D&KS'SJAAWD]@$SW\2@DH;!SW^V@DJVW5@\VVWD@]%@DJVWD@Y @D;VR4@\V@DWKW$SJA3SW^7!SJCWSW\AW5]AWAWD]@$SW\AWD]D!SW-AR4]AW@DJVV7@\V 8]AU>!KVWSJ0@DW	SJA@E$KVWSJA@A!KV&SO1@DW ]AWSV/AWD==@DU& @DHB@DWKV&SJA	KVWSK2@DWKVWSO7@D&KS'SJAAWD]@$SW\!+SJC62@\V@D;VWD@DJVV7@\V@DJVR2@\'@A:VWD	 SJA@E$KVW56VWF-*AWD]A&SW\]AWSV/AWD]AWSR*AW5]D'SW\
VWD@]%@DJ0@DU& @DJVW5@\VVWD@]%@DJVWD@Y @D;VR4@\V@DWKW$SJA&SW^7!SJA@D&KVW
@DWKW$SJA@DWKS!SM7@A!KV&SO1@DW @DJVV7@\VUO]AWSW-AWDAWD]@$SW\4 @\T)@\V@D;VWD	 SJA@E$KVWFAVV7V^AWF(>@DWKV&SJAAWD]@$SW\)]AUGPKVWSJ0@DW' KVWSK2@DW=
@DJVW5@\V:	AWD]@$SW\ @E$KV#SJ5	]KV#SW(
XSW\AW5]AW: SW\AV7]AW!
 ]AWSW-AWD:	SJA@E$KVW@]%@D>VW0
X@D> KV#!X @DJVW5@\V	SW\AV7]F'SR,AWD@\V@E9VWD3KVU><VWD@\'@DJ@\V@E9VWD@\V@A<VW5@Y&@DJ KVWSK2@DW8AWF+7@DWKV&SJA	KVWSK2@DWKVWSO7@D&KS'SJAAWD]@$SW\2@DH;!SW^U@DJVW5@\VVWD@]%@DJVWD@Y @D;VR4@\V@DWKW$SJA3SW^7!SJCTSW\AW5]AWAWD]@$SW\AWD]D!SW-AR4]AW@DJVV7@\V3SJC-2@\TWSJA@D&KVW
@DWKW$SJA@DWKS!SJ0@A'KVW SW\AV7]AW @\T62]AUD@\V@D;VWD@DJVV7@\V@DJVR2@\'@A:VWD	 SJA@E$KVW36VWF-*AWD]A&SW\]AWSV/AWD]AWSR*AW5]D'SW\
VWD@]%@DJ6+SW^,!SJCTSW\AW5]AWAWD]@$SW\AWD]D!SW-AR4]AW@DJVV7@\V 8]AU%!KVWSJ0@DW	SJA@E$KVWSJA@A!KV&SO1@DW ]AWSV/AWD;=@DU& @DJVW5@\VVWD@]%@DJVWD@Y @D;VR4@\V@DWKW$SJA&SW^,!SJA@D&KVW
@DWKW$SJA@DWKS!SJ0@A'KVW SW\AV7]AW5@\T62]AWSW-AWD	SW\AV7]AWSW\AR2]F!SR*AW5]D'SW\SJA@E$KVWGHVWD@\'@DJ @DJVV7@\V5KVU: KVWSJ0@DW]AWSV/AWDHJ@E$]T@DH#(SW\AW5]AW@DJVV7@\V(
VWFT[AWD]A&SW\
,AWD]@$SW\-@\T1@DWKV&SJA;VWD@]%@DJAV7]A#SW(		@]A# 	@D>:[K	SJA@D&KVW)	 SJA@E$KVW8	]AU0
]AWSW-AWD:	SJA@E$KVW@]%@D>VW0
X@D> KV#	'
 K@DWKV&SJA	@DJVV7@[&@A:VWD	 SJA@E$KVW ]AU>!KVWSJ0@DW	SJA@E$KVWSJA@A!KV&SO1@DW ]AWSV/AWD.VWF6*AWD]A&SW\]AWSV/AWD]AWSR*AW5]D'SW\
VWD@]%@DJ%@DU& @DHB@DWKV&SJA	KVWSK2@DWKVWSO7@D&KS'SJAAWD]@$SW\2@DH !SW^U@DJVW5@\VVWD@]%@DJVWD@Y @D;VR4@\V@DWKW$SJA3SW^,!SJCWSW\AW5]AWAWD]@$SW\AWD]D!SW-AR4]AW@DJVV7@\V3SJC62@\TWSJA@D&KVW
@DWKW$SJA@DWKS!SJ0@A'KVW SW\AV7]AW3+KVU><VWD@\'@DJ@\V@E9VWD@\V@A<VW5@Y&@DJ KVWSK2@DW+*@DH;!SW^U@DJVW5@\VVWD@]%@DJVWD@Y @D;VR4@\V@DWKW$SJA 8@\T62]AWSW-AWD	SW\AV7]AWSW\AR2]A&SR,AWD@\V@E9VWD& AWF07@DWKV&SJA	KVWSK2@DWKVWSO7@D&KS'SJAAWD]@$SW\'@DH;!SW\AW5]AWAWD]@$SW\AWD]D!SW-AR4]AW@DJVV7@\V&SJC62@\V@D;VWD@DJVV7@\V@DJVR2@[ @A<VW5@Y&@DJSW\AV7]AWGTKVWSJ0@DW@DWKW$SJA5  ]AU: ]AWSW-AWD@\V@E9VWDUWAV7KC@DU>)@DJVW5@\V@DWKW$SJA(KVUGMVWD@\'@DJ
 1
VWD@]%@DJ>@DU-]AWSW-AWD:	SJA@E$KVW@]%@D>VW0
X@D> KV#  K
SJA@D&KVW)	 SJA@E$KVW4

@DJVW5@\V
:	AWD]@$SW\ @E$KV#SJ5	]KV#SW(&@]AWSW-AWDKVWSK2@C'KS'SJAAWD]@$SW\2@DH;!SW\AW5]AWAWD]@$SW\AWD]D!SW-AR4]AW@DJVV7@\V3SJC62@\V@D;VWD@DJVV7@\V@DJVR2@\'@A:VWD	 SJA@E$KVW ]AU>!KVUG]AWSW-AWD	SW\AV7]AWSW\AR2]A&SR,AWD@\V@E9VWD3KVU%<VWFTKVWSJ0@DW	SJA@E$KVWSJA@A!KV&SO1@DW ]AWSV/AWD.VWF-*AWFJVWD@\'@DJ@\V@E9VWD@\V@A<VW5@Y&@DJ KVWSK2@DW8AWF+7@DU\AWD]A&SW\]AWSV/AWD]AWSR*AW5]D'SW\
VWD@]%@DJ6+SW^,!SJA@D&KVW
@DWKW$SJA@DWKS!SJ0@A'KVW SW\AV7]AW3+KVU><VWFTKVWSJ0@DW	SJA@E$KVWSJA@A!KV&SO1@DW ]AWSV/AWD==@DU= @DJVW5@\VVWD@]%@DJVWD@Y @D;VR4@\V@DWKW$SJA&8@\T-2]AWSW-AWD	SW\AV7]AWSW\AR2]A&SR,AWD@\V@E9VWD&KVU><VWD@\'@DJ@\V@E9VWD@\V@A<VW5@Y&@DJ KVWSK2@DW-AWF+7@DWKV&SJA	KVWSK2@DWKVWSO7@C!KS!SJ0@A'KVWVWD@]%@DJBWSW\AW5]AW ]AWSV/AWD4@DU"]AWSW-AWD@\V@E9VWDUWAV7LF@DU>)@DJVW5@\V@DWKW$SJA(KVUGMVWD@\'@DJ
 1
VWD@]%@DJ>	]AWSW-AWD:	SJA@E$KVW@]%@D>VW0
X@D> KV#;	K@DWKV&SJA;@DWKW$SJA 
VWD@\'@DJ1]AWSV/AWDKW$SJ5@D# KSJ5AW0= 	XSW\AW5]AW SJA@E$KQ'SO1@DW ]AWSV/AWD.VWF-*AWD]A&SW\]AWSV/AWD]AWSR*AW5]D'SW\
VWD@]%@DJ%@DU= @DJVW5@\VVWD@]%@DJVWD@Y @D;VR4@\V@DWKW$SJA3SW^,!SJCTSW\AW5]AWAWD]@$SW\AWD]D!SW-AR4]AW@DJVV7@\V3SJC62@\TTSJA@D&KVW
@DWKW$SJA@DWKS!SJ0@A'KVW SW\AV7]AW @\T-2]AUD@\V@D;VWD@DJVV7@\V@DJVR2@\'@A:VWD	 SJA@E$KVW ]AU%!KVUD]AWSW-AWD	SW\AV7]AWSW\AR2]A&SR,AWD@\V@E9VWD  AWF07@DWKV&SJA	KVWSK2@DWKVWSO7@D&KS'SJAAWD]@$SW\!+SJC-2@\TTSJA@D&KVW
@DWKW$SJA@DWKS!SJ0@A'KVW SW\AV7]AW3+KVU%<VWD@\'@DJ@\V@E9VWD@\V@A<VW5@Y&@DJ KVWSK2@DW-*@DH;!SW\AW5]AWAWD]@$SW\AWD]D!SW-AR4]AW@DJVV7@\V&SJC-2@\V@D;VWD@DJVV7@\V@DJVR2@\'@A:VWD	 SJA@E$KVW5]AU%!KVWSJ0@DW	SJA@E$KVWSJA@A!KQ!SO7@D&KS'SJA@\V@E9VWDT]AWD]A&SW\  SW\AV7]AW:	 SJCTSW\AW5]AW@DJVV7@\VTF]@$EUKVU&5VWD@\'@DJ KVWSK2@DW#SJCTC@\V@D;VWD	 )@\V@E9VWD+
VWD@\'@DJ
 1]AWSV/AWDKW$SJ5@D# KSJ5AW06 JVWD@\'@DJ1
VWD@]%@DJ?	AWD]A&SW\,KVWSK2@DWVV7@\"@D>
 V@\"@D#	]KVWSJ0@DWVWD@]%@C:VR4@\V@DWKW$SJA3SW^,!SJA@D&KVW
@DWKW$SJA@DWKS!SJ0@A'KVW SW\AV7]AW @\T62]AWSW-AWD	SW\AV7]AWSW\AR2]A&SR,AWD@\V@E9VWD3KVU><VWFTKVWSJ0@DW	SJA@E$KVWSJA@A!KV&SO1@DW ]AWSV/AWD.VWF6*AWFIVWD@\'@DJ@\V@E9VWD@\V@A<VW5@Y&@DJ KVWSK2@DW8AWF07@DU\AWD]A&SW\]AWSV/AWD]AWSR*AW5]D'SW\
VWD@]%@DJ%@DU= @DHA@DWKV&SJA	KVWSK2@DWKVWSO7@D&KS'SJAAWD]@$SW\!+SJC-2@\V@D;VWD@DJVV7@\V@DJVR2@\'@A:VWD	 SJA@E$KVW36VWF-*AWFIVWD@\'@DJ@\V@E9VWD@\V@A<VW5@Y&@DJ KVWSK2@DW+*@DH !SW\AW5]AWAWD]@$SW\AWD]D!SW-AR4]AW@DJVV7@\V&8]AU>!KVWSJ0@DW	SJA@E$KVWSJA@A!KV&SO1@DW ]AWSV/AWD;VWF-*AWD]A&SW\]AWSV/AWD]AWSR*AW5]D'SW\
VWD@]%@DJ0@DU= @DJVW5@\VVWD@]%@DJVWD@Y @C<VR2@\'@A:VWD
AWD]@$SW\UQSJA@D&KVW KVWSK2@DW=VWF$KVWSJ0@DW]AWSV/AWDIB@E$]T@DH#(SW\AW5]AW@DJVV7@\V(
VWFT[AWD]A&SW\
,AWD]@$SW\%&SJC(	
@DJVW5@\V:	AWD]@$SW\ @E$KV#SJ5	]KV#SW(K
SJA@D&KVW)	 SJA@E$KVW5
KVU5
SW\AW5]AW:@DWKW$SJA@E9VW0@\"JVW0SJ5ITOHDK	AWD]A&SW\ @DWKW$SM1@A'KVW SW\AV7]AW @\T-2]AWSW-AWD	SW\AV7]AWSW\AR2]A&SR,AWD@\V@E9VWD3KVU%<VWD@\'@DJ@\V@E9VWD@\V@A<VW5@Y&@DJ KVWSK2@DW8AWF07@DU_AWD]A&SW\]AWSV/AWD]AWSR*AW5]D'SW\
VWD@]%@DJ%@DU= @DHB@DWKV&SJA	KVWSK2@DWKVWSO7@D&KS'SJAAWD]@$SW\2@DH;!SW^V@DJVW5@\VVWD@]%@DJVWD@Y @D;VR4@\V@DWKW$SJA3SW^7!SJCWSW\AW5]AWAWD]@$SW\AWD]D!SW-AR4]AW@DJVV7@\V 8]AU>!KVWSJ0@DW	SJA@E$KVWSJA@A!KV&SO1@DW ]AWSV/AWD==@DU& @DHB@DWKV&SJA	KVWSK2@DWKVWSO7@D&KS'SJAAWD]@$SW\!+SJC62@\V@D;VWD@DJVV7@\V@DJVR2@\'@A:VWD	 SJA@E$KVW56VWF-*AWD]A&SW\]AWSV/AWD]AWSR*AW5]D'SW\
VWD@]%@DJ0@DU& @DJVW5@\VVWD@]%@DJVWD@Y @D;VR4@\V@DWKW$SJA&SW^7!SJA@D&KVW
@DWKW$SJA@DWKS!SM7@A!KV&SO1@DW @DJVV7@\VTC]AWSW-AWDAWD]@$SW\(SJC)AWD]A&SW\VWD@]%@DJBWSV/TUSJC$;@\V@D;VWD SJA@E$KVW;@DU_R@DJVW5@\V:@DJVV7@\V3	SJA@D&KVW )@DJVV7@\VSV/AW0]A#	KAW0@\"	XSW\AW5]AW: SW\AV7]AW$ @DH> @DJVW5@\V
:	AWD]@$SW\ @E$KV#SJ5	]KV#SW( ^XSW\AW5]AW SJA@E$KQ'SO1@DW ]AWSV/AWD.VWF-*AWD]A&SW\]AWSV/AWD]AWSR*AW5]D'SW\
VWD@]%@DJ%@DU= @DJVW5@\VVWD@]%@DJVWD@Y @D;VR4@\V@DWKW$SJA3SW^,!SJCTSW\AW5]AWAWD]@$SW\AWD]D!SW-AR4]AW@DJVV7@\V3SJC62@\TTSJA@D&KVW
@DWKW$SJA@DWKS!SJ0@A'KVW SW\AV7]AW @\T-2]AUD@\V@D;VWD@DJVV7@\V@DJVR2@\'@A:VWD	 SJA@E$KVW ]AU%!KVUD]AWSW-AWD	SW\AV7]AWSW\AR2]A&SR,AWD@\V@E9VWD  AWF07@DWKV&SJA	KVWSK2@DWKVWSO7@D&KS'SJAAWD]@$SW\!+SJC-2@\TTSJA@D&KVW
@DWKW$SJA@DWKS!SJ0@A'KVW SW\AV7]AW3+KVU%<VWD@\'@DJ@\V@E9VWD@\V@A<VW5@Y&@DJ KVWSK2@DW-*@DH;!SW\AW5]AWAWD]@$SW\AWD]D!SW-AR4]AW@DJVV7@\V&SJC-2@\V@D;VWD@DJVV7@\V@DJVR2@\'@A:VWD	 SJA@E$KVW5]AU%!KVWSJ0@DW	SJA@E$KVWSJA@A!KQ!SO7@D&KS'SJA@\V@E9VWDTXAWD]A&SW\  SW\AV7]AW&	
VWF)VWD@\'@DJ KVWSK2@DW_V@E9CUSW^%(SJA@D&KVW SW\AV7]AW;AWFIE@DWKV&SJA;@DWKW$SJA'
 @\V@D;VWD	 )SW\AV7]AWSK2@D#KV#
	K	@D#]A#4
@]AWSW-AWD: ]AWSV/AWD: ]AWSW-AWD:	SJA@E$KVW@]%@D>VW0
X@D> KV#4
XSW\AW5]AW SJA@E$KQ'SO1@DW ]AWSV/AWD.VWF-*AWD]A&SW\]AWSV/AWD]AWSR*AW5]D'SW\
VWD@]%@DJ%@DU= @DJVW5@\VVWD@]%@DJVWD@Y @D;VR4@\V@DWKW$SJA3SW^,!SJCTSW\AW5]AWAWD]@$SW\AWD]D!SW-AR4]AW@DJVV7@\V3SJC62@\TTSJA@D&KVW
@DWKW$SJA@DWKS!SJ0@A'KVW SW\AV7]AW @\T-2]AUD@\V@D;VWD@DJVV7@\V@DJVR2@\'@A:VWD	 SJA@E$KVW ]AU%!KVUD]AWSW-AWD	SW\AV7]AWSW\AR2]A&SR,AWD@\V@E9VWD  AWF07@DWKV&SJA	KVWSK2@DWKVWSO7@D&KS'SJAAWD]@$SW\!+SJC-2@\TTSJA@D&KVW
@DWKW$SJA@DWKS!SJ0@A'KVW SW\AV7]AW3+KVU%<VWD@\'@DJ@\V@E9VWD@\V@A<VW5@Y&@DJ KVWSK2@DW-*@DH;!SW\AW5]AWAWD]@$SW\AWD]D!SW-AR4]AW@DJVV7@\V&SJC-2@\V@D;VWD@DJVV7@\V@DJVR2@\'@A:VWD	 SJA@E$KVW5]AU%!KVWSJ0@DW	SJA@E$KVWSJA@A!KQ!SO7@D&KS'SJA@\V@E9VWDTYAWD]A&SW\  SW\AV7]AW4   @\V@D;VWD	 SJA@E$KVWGJVV7U^AWF9>@DWKV&SJAAWD]@$SW\)]AUGSKVWSJ0@DW' KVWSK2@DW<&@DH? SJA@D&KVW )@DJVV7@\VSV/AW0]A#	KAW0@\"74'? XSW\AW5]AW: SW\AV7]AW2
@DWKV&SJA;VWD@]%@DJAV7]A#SW(		@]A# 	@D>
V@\V@D;VWD	
]AWSV/AP4]D'SW\
VWD@]%@DJ%@DU& @DJVW5@\VVWD@]%@DJVWD@Y @D;VR4@\V@DWKW$SJA3SW^7!SJA@D&KVW
@DWKW$SJA@DWKS!SJ0@A'KVW SW\AV7]AW @\T-2]AUG@\V@D;VWD@DJVV7@\V@DJVR2@\'@A:VWD	 SJA@E$KVW ]AU%!KVUG]AWSW-AWD	SW\AV7]AWSW\AR2]A&SR,AWD@\V@E9VWD3KVU><VWFWKVWSJ0@DW	SJA@E$KVWSJA@A!KV&SO1@DW ]AWSV/AWD.VWF6*AWFJVWD@\'@DJ@\V@E9VWD@\V@A<VW5@Y&@DJ KVWSK2@DW+*@DH;!SW\AW5]AWAWD]@$SW\AWD]D!SW-AR4]AW@DJVV7@\V 8]AU>!KVUG]AWSW-AWD	SW\AV7]AWSW\AR2]A&SR,AWD@\V@E9VWD  AWF+7@DWKV&SJA	KVWSK2@DWKVWSO7@D&KS'SJAAWD]@$SW\'+SJC-2@\V@D;VWD@DJVV7@\V@DJVR2@\'@A:VWD	 SJA@E$KVW5]AU>!KVWSJ0@DW	SJA@E$KVWSJA@A!KV&SO1@DW ]AWSV/AWD;VWF6*AWD]A&SW\]AWSV/AWD]AWSR*AP2]D!SW-AR4]AWKVWSK2@DW_\@DJVW5@\V	@\V@E9VWD)]AUG@\V@D;VWD	 SJA@E$KVWGJVV7V^AWF9>@DWKV&SJAAWD]@$SW\)]AUGSKVWSJ0@DW' KVWSK2@DW/

 @DU='*SJA@D&KVW )@DJVV7@\VSV/AW0]A#	KAW0@\"$H='*XSW\AW5]AW: SW\AV7]AW;
 ]AWSW-AWD:	SJA@E$KVW@]%@D>VW0
X@D> KV#
@]AWSW-AWDKVWSK2@C'KS'SJAAWD]@$SW\2@DH;!SW\AW5]AWAWD]@$SW\AWD]D!SW-AR4]AW@DJVV7@\V3SJC62@\V@D;VWD@DJVV7@\V@DJVR2@\'@A:VWD	 SJA@E$KVW ]AU>!KVUG]AWSW-AWD	SW\AV7]AWSW\AR2]A&SR,AWD@\V@E9VWD3KVU%<VWFTKVWSJ0@DW	SJA@E$KVWSJA@A!KV&SO1@DW ]AWSV/AWD.VWF-*AWFJVWD@\'@DJ@\V@E9VWD@\V@A<VW5@Y&@DJ KVWSK2@DW8AWF+7@DU\AWD]A&SW\]AWSV/AWD]AWSR*AW5]D'SW\
VWD@]%@DJ6+SW^,!SJA@D&KVW
@DWKW$SJA@DWKS!SJ0@A'KVW SW\AV7]AW3+KVU><VWFTKVWSJ0@DW	SJA@E$KVWSJA@A!KV&SO1@DW ]AWSV/AWD==@DU= @DJVW5@\VVWD@]%@DJVWD@Y @D;VR4@\V@DWKW$SJA&8@\T-2]AWSW-AWD	SW\AV7]AWSW\AR2]A&SR,AWD@\V@E9VWD&KVU><VWD@\'@DJ@\V@E9VWD@\V@A<VW5@Y&@DJ KVWSK2@DW-AWF+7@DWKV&SJA	KVWSK2@DWKVWSO7@C!KS!SJ0@A'KVWVWD@]%@DJB\SW\AW5]AW ]AWSV/AWD+ KVU7]AWSW-AWD@\V@E9VWDU\AV7IF@DU/)@DJVW5@\V@DWKW$SJA(KVUGNVWD@\'@DJ
 1
VWD@]%@DJ'
 @DJVW5@\V:	AWD]@$SW\ @E$KV#SJ5	]KV#SW(0

X @DJVW5@\V
:@DJVV7@\V 	@\V@D;VWD)SW\AV7]AWSK2@D#KV#
	K	@D#]A#3	V@\V@D;VWD	
]AWSV/AP4]D'SW\
VWD@]%@DJ%@DU& @DJVW5@\VVWD@]%@DJVWD@Y @D;VR4@\V@DWKW$SJA3SW^7!SJA@D&KVW
@DWKW$SJA@DWKS!SJ0@A'KVW SW\AV7]AW @\T-2]AUG@\V@D;VWD@DJVV7@\V@DJVR2@\'@A:VWD	 SJA@E$KVW ]AU%!KVUG]AWSW-AWD	SW\AV7]AWSW\AR2]A&SR,AWD@\V@E9VWD3KVU><VWFWKVWSJ0@DW	SJA@E$KVWSJA@A!KV&SO1@DW ]AWSV/AWD.VWF6*AWFJVWD@\'@DJ@\V@E9VWD@\V@A<VW5@Y&@DJ KVWSK2@DW+*@DH;!SW\AW5]AWAWD]@$SW\AWD]D!SW-AR4]AW@DJVV7@\V 8]AU>!KVUG]AWSW-AWD	SW\AV7]AWSW\AR2]A&SR,AWD@\V@E9VWD  AWF+7@DWKV&SJA	KVWSK2@DWKVWSO7@D&KS'SJAAWD]@$SW\'+SJC-2@\V@D;VWD@DJVV7@\V@DJVR2@\'@A:VWD	 SJA@E$KVW5]AU>!KVWSJ0@DW	SJA@E$KVWSJA@A!KV&SO1@DW ]AWSV/AWD;VWF6*AWD]A&SW\]AWSV/AWD]AWSR*AP2]D!SW-AR4]AWKVWSK2@DW\T@DJVW5@\V	@\V@E9VWD)AWF4@\V@D;VWD	 SJA@E$KVWFJVV7V^AWF9>@DWKV&SJAAWD]@$SW\)]AUGSKVWSJ0@DW' KVWSK2@DW)@DWKV&SJA;VWD@]%@DJAV7]A#SW(		@]A# 	@D>4
 K@DWKV&SJA;@DWKW$SJA3	
VWD@\'@DJ1]AWSV/AWDKW$SJ5@D# KSJ5AW0.	XSW\AW5]AW SJA@E$KQ'SO1@DW ]AWSV/AWD.VWF-*AWD]A&SW\]AWSV/AWD]AWSR*AW5]D'SW\
VWD@]%@DJ%@DU= @DJVW5@\VVWD@]%@DJVWD@Y @D;VR4@\V@DWKW$SJA3SW^,!SJCTSW\AW5]AWAWD]@$SW\AWD]D!SW-AR4]AW@DJVV7@\V3SJC62@\TTSJA@D&KVW
@DWKW$SJA@DWKS!SJ0@A'KVW SW\AV7]AW @\T-2]AUD@\V@D;VWD@DJVV7@\V@DJVR2@\'@A:VWD	 SJA@E$KVW ]AU%!KVUD]AWSW-AWD	SW\AV7]AWSW\AR2]A&SR,AWD@\V@E9VWD  AWF07@DWKV&SJA	KVWSK2@DWKVWSO7@D&KS'SJAAWD]@$SW\!+SJC-2@\TTSJA@D&KVW
@DWKW$SJA@DWKS!SJ0@A'KVW SW\AV7]AW3+KVU%<VWD@\'@DJ@\V@E9VWD@\V@A<VW5@Y&@DJ KVWSK2@DW-*@DH;!SW\AW5]AWAWD]@$SW\AWD]D!SW-AR4]AW@DJVV7@\V&SJC-2@\V@D;VWD@DJVV7@\V@DJVR2@\'@A:VWD	 SJA@E$KVW5]AU%!KVWSJ0@DW	SJA@E$KVWSJA@A!KQ!SO7@D&KS'SJA@\V@E9VWDW_AWD]A&SW\  SW\AV7]AW:	 SJCTSW\AW5]AW@DJVV7@\VUD]@$EPKVU75VWD@\'@DJ KVWSK2@DW#SJCT@@\V@D;VWD	 )@\V@E9VWD)
SJA@D&KVW )@DJVV7@\VSV/AW0]A#	KAW0@\") K	AWD]A&SW\,AWD]@$SW\6 SW\AW5]AW:@DWKW$SJA@E9VW0@\"JVW0SJ5 XSW\AW5]AW SJA@E$KQ'SO1@DW ]AWSV/AWD.VWF-*AWD]A&SW\]AWSV/AWD]AWSR*AW5]D'SW\
VWD@]%@DJ%@DU= @DJVW5@\VVWD@]%@DJVWD@Y @D;VR4@\V@DWKW$SJA3SW^,!SJCTSW\AW5]AWAWD]@$SW\AWD]D!SW-AR4]AW@DJVV7@\V3SJC62@\TTSJA@D&KVW
@DWKW$SJA@DWKS!SJ0@A'KVW SW\AV7]AW @\T-2]AUD@\V@D;VWD@DJVV7@\V@DJVR2@\'@A:VWD	 SJA@E$KVW ]AU%!KVUD]AWSW-AWD	SW\AV7]AWSW\AR2]A&SR,AWD@\V@E9VWD  AWF07@DWKV&SJA	KVWSK2@DWKVWSO7@D&KS'SJAAWD]@$SW\!+SJC-2@\TTSJA@D&KVW
@DWKW$SJA@DWKS!SJ0@A'KVW SW\AV7]AW3+KVU%<VWD@\'@DJ@\V@E9VWD@\V@A<VW5@Y&@DJ KVWSK2@DW-*@DH;!SW\AW5]AWAWD]@$SW\AWD]D!SW-AR4]AW@DJVV7@\V&SJC-2@\V@D;VWD@DJVV7@\V@DJVR2@\'@A:VWD	 SJA@E$KVW5]AU%!KVWSJ0@DW	SJA@E$KVWSJA@A!KQ!SO7@C!"
}