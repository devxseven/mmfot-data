{
  "BwoYDBYdAg==": "AP4]D'SW\SJA@E$KVWFAVWD@\'@DJ @DJVV7@\V)]AU:	@DJVW5@\V@DWKW$SJAUN@]%QC]AU&(KVWSJ0@DW
]AWSV/AWD5SW^TQSJA@D&KVW )	 SJA@E$KVW%	AWD]A&SW\
,KVWSK2@DWVV7@\"@D> K
]@\"@D#@D#\TWCHFUG@\"C@SO_S BAKWES FLTDS]PWX @DJVW5@\V
:@DJVV7@\V)KVWSJ0@DW'@\V@E9VWD]@$SW(AW0X  V
SW(VW0	VW0W^VPFMCTSW(WP@MAPA 
TD@PR]@IKUFWX HGK	AWD]A&SW\ @DWKW$SM1@A'KVW SW\AV7]AW @\T-2]AWSW-AWD	SW\AV7]AWB][SVO]AWSR*AW5]D'SW\
VWD@]%@DJ%@DU= @DJVW5@\VVWD@]%@DJG]CR]]@DJVR2@\'@A:VWD	 SJA@E$KVW ]AU>!KVUG]AWSW-AWD	SW\AV7]AWSK2@D#KV#	XX@\"	@D#HD]]QUG'KWN]@#=@E!^VRAGPN]Q@NVQP]NE\RD@VW@0VV2SVURNCTSW\AR2]A&SR,AWD@\V@E9VWD3KVU%<VWFTKVWSJ0@DW	SJA@E$KVW@]%@D>VW0	XK]A#@D>  	HD@@PFT1VV]KW#   @E<KW@VNC@SWVCWNSZSOT@RAW@1AV2NKTAXTTSJA@A!KV&SO1@DW ]AWSV/AWD.VWF-*AWFJVWD@\'@DJ@\V@E9VWD@\V@A<VW5@Y&@DJ KVWSK2@DW8AWF+7@DU\AWD]A&SW\]AWSV/AWD]AWSR*AW5]D'SW\
VWD@]%@DJ6+SW^,!SJA@D&KVW
@DWKW$SJA@DWKS!SJ0@A'KVW SW\AV7]AW3+KVU><VWFTKVWSJ0@DW	SJA@E$KVWSJA@A!KV&SO1@DW ]AWSV/AWD==@DU= @DJVW5@\VVWD@]%@DJVWD@Y @D;VR4@\V@DWKW$SJA&8@\T-2]AWSW-AWD	SW\AV7]AWSW\AR2]A&SR,AWD@\V@E9VWD&KVU><VWD@\'@DJ@\V@E9VWDRV]PGLEPSW\AR2]A&SR,AWD@\V@E9VWD&KVU%<VWD@\'@DJ@\V@E9VWDRV]PGLEPSW\AR2]F!SR*AW5]D'SW\SJA@E$KVWGHVWD@\'@DJ @DJVV7@\V) SW^U@DJVW5@\V@DWKW$SJAUO@]%QC]AU&(KVWSJ0@DW
]AWSV/AWD5SW^TQSJA@D&KVW )	 SJA@E$KVW72VWF$ 
@DWKV&SJA;VWD@]%@DJAV7]A#SW(V J]A#@D>

@D>AUDP^QUG]A#CSWWEDQBWRAJNQQRBS\\UXSW\AW5]AW: SW\AV7]AW> SJC$VWF&SJA@D&KVW)@DJVV7@\VSV/AW0]A#J
XAW0	@\"
@\"WFJFUCU_AW0SN\TTNNVZTOBPPBFSC\@]AWSW-AWDKVWSK2@C'KS'SJAAWD]@$SW\2@DH;!SW\AW5]AWAWD]@$SW\]\GJC]G@\V@A<VW5@Y&@DJ KVWSK2@DW8AWF+7@DWKV&SJA	KVWSK2@DWW]TDHKTSW\AR2]A&SR,AWD@\V@E9VWD3KVU><VWFTKVWSJ0@DW	SJA@E$KVWCIBWBUKVWSO7@D&KS'SJAAWD]@$SW\2@DH !SW^U@DJVW5@\VVWD@]%@DJFTGWZT@DJVR2@\'@A:VWD	 SJA@E$KVW ]AU>!KVUD]AWSW-AWD	SW\AV7]AWSW\AR2]A&SR,AWD@\V@E9VWD3KVU%<VWFWKVWSJ0@DW	SJA@E$KVWSJA@A!KV&SO1@DW ]AWSV/AWD==@DU& @DJVW5@\VVWD@]%@DJVWD@Y @D;VR4@\V@DWKW$SJA 8@\T-2]AUG@\V@D;VWD@DJVV7@\V@DJVR2@\'@A:VWD	 SJA@E$KVW36VWF6*AWD]A&SW\]AWSV/AWD]AWSR*AW5]D'SW\
VWD@]%@DJ0+SW^,!SJA@D&KVW
@DWKW$SJA@DWKS!SJ0@A'KVW SW\AV7]AW5@\T-2]AWSW-AWD	SW\AV7]AWDVW\UE]AWSR*AW5]D'SW\
VWD@]%@DJ0@DU= @DJVW5@\VVWD@]%@DJAVO]^W@DJVR2@[ @A<VW5@Y&@DJSW\AV7]AWGTKVWSJ0@DW@DWKW$SJA)@DHB@DWKV&SJAAWD]@$SW\T\SK2QC@\T5;]AWSW-AWD@\V@E9VWD(@DHCQSW\AW5]AW
: SW\AV7]AW%  SJC' 
VWFWWAWD]A&SW\
,KVWSK2@DWVV7@\"@D> K
]@\"@D#@D#\TWCHFUG@\"B]NQ\R O@ERSP EKCUBW^SRBKQX @DJVW5@\V
:@DJVV7@\V(	 ]AU>@-W@7A	AWF+0@DWKV&SJA;VWD@]%@DJAV7]A#SW(V J]A#@D>

@D>AUDP^QUG]A#O SGB_QVFKPY]UEQ
SWXSW\AW5]AW SJA@E$KQ'SO1@DW ]AWSV/AWD.VWF-*AWD]A&SW\]AWSV/AWDMBPCV^AWD]D!SW-AR4]AW@DJVV7@\V3SJC62@\V@D;VWD@DJVV7@\VPGMFVF@\V@A<VW5@Y&@DJ KVWSK2@DW8AWF07@DU_AWD]A&SW\]AWSV/AWDKW$SJ5@D#	V@ VW0	 SJ5[KKUBS^;	]EVAV06SK7PDZQOAV]]PTAOB OU BMKR_@DN"@E<E]GR
PTG]AWSR*AW5]D'SW\
VWD@]%@DJ%@DU= @DHB@DWKV&SJA	KVWSK2@DWVV7@\"@D>	@

]	AW0@\"
H]\UBNC:
JEK@E#6 @] TBNSFUUDL]QV]PJTBRV]QAASWX" SV*R]GOQGTKVWSO7@D&KS'SJAAWD]@$SW\2@DH;!SW^V@DJVW5@\VVWD@]%@DJVWD@Y @D;VR4@\V@DWKW$SJA3SW^7!SJCWSW\AW5]AWAWD]@$SW\AWD]D!SW-AR4]AW@DJVV7@\V 8]AU>!KVWSJ0@DW	SJA@E$KVWSJA@A!KV&SO1@DW ]AWSV/AWD==@DU& @DHB@DWKV&SJA	KVWSK2@DWKVWSO7@D&KS'SJAAWD]@$SW\!+SJC62@\V@D;VWD@DJVV7@\V@DJVR2@\'@A:VWD	 SJA@E$KVW56VWF-*AWD]A&SW\]AWSV/AWD]AWSR*AW5]D'SW\
VWD@]%@DJ0@DU& @DJVW5@\VVWD@]%@DJAVNVXV@DJVR2@\'@A:VWD	 SJA@E$KVW5]AU%!KVWSJ0@DW	SJA@E$KVWDKKV@WKVWSO7@C!KS!SJ0@A'KVWVWD@]%@DJBWSW\AW5]AW ]AWSV/AWD4 KVUG]AWSW-AWD@\V@E9VWDUWAV7LF@DU>)@DJVW5@\V@DWKW$SJA(KVUFLVWD@\'@DJ
 1
VWD@]%@DJ?KVWSJ0@DW'@\V@E9VWD]@$SW(AW0X  V
SW(VW0	VW0W^VPFMCTSW(TCJ\C YR@\EUSDO@B]VCK	AWD]A&SW\,AWD]@$SW\( VWD@\'@DJ1]AWSV/AWDKW$SJ5@D#X@
SJ5	AW0
 AW0JCWCU[TTSJ5]\X\T@MPX\EANUY P@IF\@TZWK@DWKV&SJA	@DJVV7@[&@A:VWD	 SJA@E$KVW ]AU>!KVWSJ0@DW	SJA@E$KVWDKFWEWKVWSO7@D&KS'SJAAWD]@$SW\2@DH !SW\AW5]AWAWD]@$SW\VVCJ@WSW\AR2]A&SR,AWD@\V@E9VWD3KVU><VWFTKVWSJ0@DW	SJA@E$KVWCIASB\KVWSO7@D&KS'SJAAWD]@$SW\2@DH !SW^U@DJVW5@\VVWD@]%@DJFTDSZ]@DJVR2@\'@A:VWD	 SJA@E$KVW ]AU>!KVUD]AWSW-AWD	SW\AV7]AWSW\AR2]A&SR,AWD@\V@E9VWD3KVU%<VWFWKVWSJ0@DW	SJA@E$KVWSJA@A!KV&SO1@DW ]AWSV/AWD==@DU& @DJVW5@\VVWD@]%@DJVWD@Y @D;VR4@\V@DWKW$SJA 8@\T-2]AUG@\V@D;VWD@DJVV7@\V@DJVR2@\'@A:VWD	 SJA@E$KVW36VWF6*AWD]A&SW\]AWSV/AWD]AWSR*AW5]D'SW\
VWD@]%@DJ0+SW^,!SJA@D&KVW
@DWKW$SJA@DWKS!SJ0@A'KVW SW\AV7]AW5@\T-2]AWSW-AWD	SW\AV7]AWAU[]P@]AWSR*AW5]D'SW\
VWD@]%@DJ0@DU= @DJVW5@\VVWD@]%@DJDUC\[R@DJVR2@[ @A<VW5@Y&@DJSW\AV7]AWGVKVWSJ0@DW@DWKW$SJA'
SW\AW5]AW@DJVV7@\VTF]@$FUKVU&5VWD@\'@DJ KVWSK2@DW#SJCUB@\V@D;VWD	 )@\V@E9VWD6-AWF> SJA@D&KVW )@DJVV7@\VSV/AW0]A#J
XAW0	@\"
@\"WFJFUCU_AW0R@VRKA]EU]TW@JGPYRPGAKW]@]AWSW-AWD: ]AWSV/AWD:KVUFLVWF) KVWSJ0@DW'@\V@E9VWD]@$SW(AW0X  V
SW(VW0	VW0W^VPFMCTSW(]@OCQVU@@QE PJCR_\BK	AWD]A&SW\ @DWKW$SM1@A'KVW SW\AV7]AW @\T-2]AWSW-AWD	SW\AV7]AWEQZWRF]AWSR*AW5]D'SW\
VWD@]%@DJ%@DU= @DJVW5@\VVWD@]%@DJ@QBVYT@DJVR2@\'@A:VWD	 SJA@E$KVW ]AU>!KVUG]AWSW-AWD	SW\AV7]AWO\_VUOOVWD@Y @D;VR4@\V@DWKW$SJA3SW^7!SJCTSW\AW5]AWAWD]@$SW\]\GJC\A@\V@A<VW5@Y&@DJ KVWSK2@DW8AWF07@DU\AWD]A&SW\]AWSV/AWD]AWSR*AW5]D'SW\
VWD@]%@DJ%@DU= @DHA@DWKV&SJA	KVWSK2@DWKVWSO7@D&KS'SJAAWD]@$SW\!+SJC-2@\V@D;VWD@DJVV7@\V@DJVR2@\'@A:VWD	 SJA@E$KVW36VWF-*AWFIVWD@\'@DJ@\V@E9VWD@\V@A<VW5@Y&@DJ KVWSK2@DW+*@DH !SW\AW5]AWAWD]@$SW\ @E$KV#SJ5	VK 	V
@\"	@D#[UW@AFRC:PB@UCV]VDD\@\VGNFSVV\,@	V@VWD@Y @D;VR4@\V@DWKW$SJA&8@\T-2]AWSW-AWD	SW\AV7]AWSW\AR2]A&SR,AWD@\V@E9VWD&KVU><VWD@\'@DJ@\V@E9VWDR[VVE@VWD@Y @D;VR4@\V@DWKW$SJA&SW^7!SJA@D&KVW
@DWKW$SJARCW]W]SJA@A!KQ!SO7@D&KS'SJA@\V@E9VWDTZAWD]A&SW\  SW\AV7]AW&	
VWF)VWD@\'@DJ KVWSK2@DW_T@E9CUSW^4(SJA@D&KVW SW\AV7]AW;AWFHG@DWKV&SJA;@DWKW$SJA&  ]AWSW-AWD:	SJA@E$KVW@]%@D>VW0K  K@D> KV#KV#DHAPFP^U@D> ]\TU@VOQWD@UDV\]CPDU]JVWD@\'@DJ1
VWD@]%@DJ?  
VWD@\'@DJ1]AWSV/AWDKW$SJ5@D#X@
SJ5	AW0
 AW0JCWCU[TTSJ5QBVWDGPAW\TS@AEPDWVUABPE^ K@DWKV&SJA	@DJVV7@[&@A:VWD	 SJA@E$KVW ]AU>!KVWSJ0@DW	SJA@E$KVWOABWF\XAWD]D!SW-AR4]AW@DJVV7@\V3SJC62@\V@D;VWD@DJVV7@\V\OIAUOSKVWSO7@D&KS'SJAAWD]@$SW\2@DH;!SW^U@DJVW5@\VVWD@]%@DJ@WAT[]@DJVR2@\'@A:VWD	 SJA@E$KVW ]AU%!KVUG]AWSW-AWD	SW\AV7]AWEWYUPO]AWSR*AW5]D'SW\
VWD@]%@DJ%@DU& @DHA@DWKV&SJA	KVWSK2@DWKVWSO7@D&KS'SJAAWD]@$SW\2@DH !SW^V@DJVW5@\VVWD@]%@DJVWD@Y @D;VR4@\V@DWKW$SJA 8@\T-2]AWSW-AWD	SW\AV7]AWSW\AR2]A&SR,AWD@\V@E9VWD  AWF07@DU_AWD]A&SW\]AWSV/AWD]AWSR*AW5]D'SW\
VWD@]%@DJ6+SW^7!SJA@D&KVW
@DWKW$SJA@E9VW0@\"	TX@
]A#@D>FUNP^RSE'QY RBIGWZAOBWD  TOCWEV;]EVAWD]D!SW-AR4]AW@DJVV7@\V&8]AU>!KVWSJ0@DW	SJA@E$KVWSJA@A!KV&SO1@DW ]AWSV/AWD;VWF-*AWD]A&SW\]AWSV/AWDMCPFP^AWD]D!SW-AR4]AW@DJVV7@\V&SJC62@\V@D;VWD@DJVV7@\VPFMCPF@\V@A<VP2@Y @D;VR4@\V]AWSV/AWDIF@DWKV&SJA		 SJA@E$KVW%@\T$SJA@D&KVW SW\AV7]AWGUKW$EHVWF5#AWD]A&SW\ VWD@]%@DJ>@\TUB]AWSW-AWD: ]AWSV/AWD*@\V@D;VWD	 )SW\AV7]AWSK2@D#KV#K X@D#	]A#
	
]A#DU\QUCHB@D#VAKPCV
]KTNT]W OGVPL]KVWSJ0@DW' KVWSK2@DW(
AWD]A&SW\,KVWSK2@DWVV7@\"@D> K
]@\"@D#@D#\TWCHFUG@\"NK\G BLA]]^WTA]C[QGKESX @DJVW5@\V	SW\AV7]F'SR,AWD@\V@E9VWD3KVU><VWD@\'@DJ@\V@E9VWDWWUWAOVWD@Y @D;VR4@\V@DWKW$SJA3SW^7!SJA@D&KVW
@DWKW$SJAWOT\SRSJA@A!KV&SO1@DW ]AWSV/AWD.VWF-*AWFIVWD@\'@DJ@\V@E9VWD\WUTBHVWD@Y @D;VR4@\V@DWKW$SJA3SW^7!SJCTSW\AW5]AWAWD]@$SW\]\GIGUSW\AR2]A&SR,AWD@\V@E9VWD3KVU><VWFWKVWSJ0@DW	SJA@E$KVWSJA@A!KV&SO1@DW ]AWSV/AWD.VWF6*AWFJVWD@\'@DJ@\V@E9VWD@\V@A<VW5@Y&@DJ KVWSK2@DW+*@DH;!SW\AW5]AWAWD]@$SW\AWD]D!SW-AR4]AW@DJVV7@\V 8]AU>!KVUG]AWSW-AWD	SW\AV7]AWSW\AR2]A&SR,AWD@\V@E9VWD  AWF+7@DWKV&SJA	KVWSK2@DWKVWSO7@D&KS'SJAAWD]@$SW\'+SJC-2@\V@D;VWD@DJVV7@\V@DJVR2@\'@A:VWD	 SJA@E$KVW5]AU>!KVWSJ0@DW	SJA@E$KVWN@ERETKVWSO7@D&KS'SJAAWD]@$SW\'@DH !SW\AW5]AWAWD]@$SW\\]@O@TSW\AR2]F!SR*AW5]D'SW\SJA@E$KVWGNVWD@\'@DJ @DJVV7@\V)]AU:	@DJVW5@\V@DWKW$SJATG@]%UF]AU&(KVWSJ0@DW
]AWSV/AWD5SW^TQSJA@D&KVW )	 SJA@E$KVW3@DJVW5@\V:	AWD]@$SW\ @E$KV#SJ5@ K
KV# SW(
SW(VUDMCPFTKV#FBRG] EACPNS
U\NAQASSAOEK
SJA@D&KVW)	 SJA@E$KVW$	SW^&  @DWKV&SJA;VWD@]%@DJAV7]A#SW(V J]A#@D>

@D>AUDP^QUG]A#SPBKC\O_TEKA]E]WRVCLSE XSSXSW\AW5]AW SJA@E$KQ'SO1@DW ]AWSV/AWD.VWF-*AWD]A&SW\]AWSV/AWDAJTDU[V@DJVR2@\'@A:VWD	 SJA@E$KVW ]AU%!KVWSJ0@DW	SJA@E$KVWOABWFP\AWD]D!SW-AR4]AW@DJVV7@\V3SJC-2@\TTSJA@D&KVW
@DWKW$SJA\OT\TTC]AWSR*AW5]D'SW\
VWD@]%@DJ%@DU= @DHB@DWKV&SJA	KVWSK2@DWW]TDHBPSW\AR2]A&SR,AWD@\V@E9VWD3KVU><VWFWKVWSJ0@DW	SJA@E$KVWSJA@A!KV&SO1@DW ]AWSV/AWD.VWF6*AWFJVWD@\'@DJ@\V@E9VWD@\V@A<VW5@Y&@DJ KVWSK2@DW+*@DH;!SW\AW5]AWAWD]@$SW\AWD]D!SW-AR4]AW@DJVV7@\V 8]AU>!KVUG]AWSW-AWD	SW\AV7]AWSW\AR2]A&SR,AWD@\V@E9VWD  AWF+7@DWKV&SJA	KVWSK2@DWKVWSO7@D&KS'SJAAWD]@$SW\'+SJC-2@\V@D;VWD@DJVV7@\V@DJVR2@\'@A:VWD	 SJA@E$KVW5]AU>!KVWSJ0@DW	SJA@E$KVW@ID]O]KVWSO7@D&KS'SJAAWD]@$SW\'@DH !SW\AW5]AWAWD]@$SW\RTA@J]SW\AR2]F!SR*AW5]D'SW\SJA@E$KVWGOVWD@\'@DJ @DJVV7@\V' 	SJA@D&KVW SW\AV7]AWGWKW$FHVWF$#AWD]A&SW\ VWD@]%@DJ>@\TUC]AWSW-AWD: ]AWSV/AWD5KVUFMVWD@\'@DJ
 1]AWSV/AWDKW$SJ5@D#X@
SJ5	AW0
 AW0JCWCU[TWSJ5 GTVRASFV^S\E]NQ]\GQFPWK@DWKV&SJA;@DWKW$SJA @DU(KVWSJ0@DW'@\V@E9VWD]@$SW(AW0X  V
SW(VW0	VW0W^VPFMCWSW(Q]DAOV]OAUAVRNJAQZSK	AWD]A&SW\ @DWKW$SM1@A'KVW SW\AV7]AW @\T-2]AWSW-AWD	SW\AV7]AWSW\AR2]A&SR,AWD@\V@E9VWD3KVU%<VWD@\'@DJ@\V@E9VWD@\V@A<VW5@Y&@DJ KVWSK2@DW8AWF07@DU_AWD]A&SW\]AWSV/AWD]AWSR*AW5]D'SW\
VWD@]%@DJ%@DU= @DHB@DWKV&SJA	KVWSK2@DWKVWSO7@D&KS'SJAAWD]@$SW\2@DH;!SW^V@DJVW5@\VVWD@]%@DJVWD@Y @D;VR4@\V@DWKW$SJA3SW^7!SJCWSW\AW5]AWAWD]@$SW\AWD]D!SW-AR4]AW@DJVV7@\V 8]AU>!KVWSJ0@DW	SJA@E$KVWSJA@A!KV&SO1@DW ]AWSV/AWD==@DU& @DHB@DWKV&SJA	KVWSK2@DWKVWSO7@D&KS'SJAAWD]@$SW\!+SJC62@\V@D;VWD@DJVV7@\V@DJVR2@\'@A:VWD	 SJA@E$KVW56VWF-*AWD]A&SW\]AWSV/AWD]AWSR*AW5]D'SW\
VWD@]%@DJ0@DU& @DJVW5@\VVWD@]%@DJVWD@Y @D;VR4@\V@DWKW$SJA&SW^7!SJA@D&KVW
@DWKW$SJA@DWKS!SM7@A!KV&SO1@DW @DJVV7@\VTN]AWSW-AWDAWD]@$SW\7 @DU/AWD]A&SW\VWD@]%@DJCTSV/UPSJC$;@\V@D;VWD SJA@E$KVW;
@DU^Q@DJVW5@\V:@DJVV7@\V'KVWSJ0@DW'@\V@E9VWD]@$SW(AW0X  V
SW(VW0	VW0W^VPFMCWSW( NHK CP\WPGA@\EVQRDNBW_] D@K	AWD]A&SW\,AWD]@$SW\. KVWSJ0@DW'@\V@E9VWD]@$SW(AW0X  V
SW(VW0	VW0W^VPFMCWSW(TGBO\URNFTDXPPA@JREWVLK	AWD]A&SW\ @DWKW$SM1@A'KVW SW\AV7]AW @\T-2]AWSW-AWD	SW\AV7]AWSW\AR2]A&SR,AWD@\V@E9VWD3KVU%<VWD@\'@DJ@\V@E9VWD@\V@A<VW5@Y&@DJ KVWSK2@DW8AWF07@DU_AWD]A&SW\]AWSV/AWD]AWSR*AW5]D'SW\
VWD@]%@DJ%@DU= @DHB@DWKV&SJA	KVWSK2@DWKVWSO7@D&KS'SJAAWD]@$SW\2@DH;!SW^V@DJVW5@\VVWD@]%@DJVWD@Y @D;VR4@\V@DWKW$SJA3SW^7!SJCWSW\AW5]AWAWD]@$SW\AWD]D!SW-AR4]AW@DJVV7@\V 8]AU>!KVWSJ0@DW	SJA@E$KVWSJA@A!KV&SO1@DW ]AWSV/AWD==@DU& @DHB@DWKV&SJA	KVWSK2@DWKVWSO7@D&KS'SJAAWD]@$SW\!+SJC62@\V@D;VWD@DJVV7@\V@DJVR2@\'@A:VWD	 SJA@E$KVW56VWF-*AWD]A&SW\]AWSV/AWD]AWSR*AW5]D'SW\
VWD@]%@DJ0@DU& @DJVW5@\VVWD@]%@DJVWD@Y @D;VR4@\V@DWKW$SJA&SW^7!SJA@D&KVW
@DWKW$SJA@DWKS!SM7@A!KV&SO1@DW @DJVV7@\VTO]AWSW-AWDAWD]@$SW\(@DU_AWD]A&SW\VWD@]%@DJCTSV/UPSJC$;@\V@D;VWD SJA@E$KVW;
@DU^Q@DJVW5@\V:@DJVV7@\V) SW\AW5]AW
:@DWKW$SJA@E9VW0@\"]KVW0 SJ5SJ5WFW[TPFJVW0\SL@PGU[QUBEDU^ AJBYDV@\V@D;VWD)@\V@E9VWD(	@\V@D;VWD)SW\AV7]AWSK2@D#KV#K X@D#	]A#
	
]A#DU\QUCHA@D#[VVCN]N]RUNDSD\_PD\Z\O]KVWSJ0@DWVWD@]%@C:VR4@\V@DWKW$SJA3SW^,!SJA@D&KVW
@DWKW$SJA@DWKS!SJ0@A'KVW SW\AV7]AW @\T62]AWSW-AWD	SW\AV7]AWSW\AR2]A&SR,AWD@\V@E9VWD3KVU><VWFTKVWSJ0@DW	SJA@E$KVWSJA@A!KV&SO1@DW ]AWSV/AWD.VWF6*AWFIVWD@\'@DJ@\V@E9VWD@\V@A<VW5@Y&@DJ KVWSK2@DW8AWF07@DU\AWD]A&SW\]AWSV/AWD]AWSR*AW5]D'SW\
VWD@]%@DJ%@DU= @DHA@DWKV&SJA	KVWSK2@DWKVWSO7@D&KS'SJAAWD]@$SW\!+SJC-2@\V@D;VWD@DJVV7@\V@DJVR2@\'@A:VWD	 SJA@E$KVW36VWF-*AWFIVWD@\'@DJ@\V@E9VWD@\V@A<VW5@Y&@DJ KVWSK2@DW+*@DH !SW\AW5]AWAWD]@$SW\AWD]D!SW-AR4]AW@DJVV7@\V&8]AU>!KVWSJ0@DW	SJA@E$KVWSJA@A!KV&SO1@DW ]AWSV/AWD;VWF-*AWD]A&SW\]AWSV/AWD]AWSR*AW5]D'SW\
VWD@]%@DJ0@DU= @DJVW5@\VVWD@]%@DJVWD@Y @C<VR2@\'@A:VWD
AWD]@$SW\VUSJA@D&KVW KVWSK2@DW"@DH?KVWSJ0@DW]AWSV/AWDHB@E$]T@DH2(SW\AW5]AW@DJVV7@\V(VWFU[AWD]A&SW\
,AWD]@$SW\6 VWF6SW\AW5]AW
:@DWKW$SJA@E9VW0@\"]KVW0 SJ5SJ5WFW[TPFJVW0\V COUE ]TTDF G [PQOETF TV@\V@D;VWD)@\V@E9VWD$	SW^'	VWD@\'@DJ1]AWSV/AWDKW$SJ5@D#X@
SJ5	AW0
 AW0JCWCU[TWSJ5NTXWMS^PPORB
\UEF\NPWTK@DWKV&SJA	@DJVV7@[&@A:VWD	 SJA@E$KVW ]AU>!KVWSJ0@DW	SJA@E$KVWSJA@A!KV&SO1@DW ]AWSV/AWD.VWF6*AWD]A&SW\]AWSV/AWD]AWSR*AW5]D'SW\
VWD@]%@DJ%@DU& @DHB@DWKV&SJA	KVWSK2@DWKVWSO7@D&KS'SJAAWD]@$SW\2@DH !SW^U@DJVW5@\VVWD@]%@DJVWD@Y @D;VR4@\V@DWKW$SJA3SW^,!SJCWSW\AW5]AWAWD]@$SW\AWD]D!SW-AR4]AW@DJVV7@\V3SJC62@\TWSJA@D&KVW
@DWKW$SJA@DWKS!SJ0@A'KVW SW\AV7]AW3+KVU><VWD@\'@DJ@\V@E9VWD@\V@A<VW5@Y&@DJ KVWSK2@DW+*@DH;!SW^U@DJVW5@\VVWD@]%@DJVWD@Y @D;VR4@\V@DWKW$SJA 8@\T62]AWSW-AWD	SW\AV7]AWSW\AR2]A&SR,AWD@\V@E9VWD& AWF07@DWKV&SJA	KVWSK2@DWKVWSO7@D&KS'SJAAWD]@$SW\'@DH;!SW\AW5]AWAWD]@$SW\AWD]D!SW-AR4]AW@DJVV7@\V&SJC62@\V@D;VWD@DJVV7@\V@DJVR2@[ @A<VP2"
}